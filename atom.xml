<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平行世界</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://parallelworld.pw/"/>
  <updated>2017-10-31T09:47:31.614Z</updated>
  <id>http://parallelworld.pw/</id>
  
  <author>
    <name>Parallel World</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈 ifelse</title>
    <link href="http://parallelworld.pw/2017/09/06/%E6%B5%85%E8%B0%88ifelse/"/>
    <id>http://parallelworld.pw/2017/09/06/浅谈ifelse/</id>
    <published>2017-09-06T07:38:25.000Z</published>
    <updated>2017-10-31T09:47:31.614Z</updated>
    
    <content type="html"><![CDATA[<p>同事发来他写的文章，<a href="https://mikefighting.github.io/2017/09/05/chat-if-else/" target="_blank" rel="external">此处是链接</a>。讲的是代码中<code>ifelse</code>的缺点，及改进方式。</p>
<p>同事视<code>ifelse</code>为洪水猛兽，在我看来其实不然。<code>ifelse</code>是所有计算机高级语言的基本语法或者说基本词汇，有了基本词汇才能有丰富的表达啊。<code>ifelse</code>的作用是进行语句的判断，从而改变程序流程。从某种意义上讲，<code>ifelse</code>是一种查找过程。找到符合条件的判断语句，然后执行对应的大括号内的代码。</p>
<p>文中提到，除了<code>ifelse</code>以外，还有<code>switch</code>，<code>map</code>（字典），<code>command</code>模式，多态等可以替代<code>ifelse</code>。这些方式可以说都是在查找，找到那个对的代码，然后执行。文中很推崇用高级的编程模式来做，比如<code>command</code>模式，多态等。但不是所有的情况都适合，而且大部分情况是没必要使用这些高级技巧的。</p>
<p>下面就具体罗列下每种情况的优缺点和适用条件。</p>
<p><strong>如果是数量较多，用<code>map</code>很合适，对应的是<code>command</code>模式，优点是查找速度快，易扩展，缺点是空间换时间，需要额外的存储空间，还需要定义多种类。量少时，可以用枚举，优点是清晰明了，缺点是要定义额外的枚举类型。量更少时可以用<code>ifelse</code>或者<code>switch</code>，优点是写起来很符合直觉，写得快，缺点是代码看起来比较多，杂。</strong></p>
<p>具体实施时，就需要编码者根据不同实际情况进行选择了。这个其实是个经验问题。再比如，最近我在练乒乓球，主要练习拧拉，虽然这个技术很厉害，但是不是所有情况都适合，对方搓你的正手底线，你还用拧就不合适了，这个时候直接拉球就好了。</p>
<p>最后，用白居易的一个典故来表达我编码的愿景，真心希望我写的代码都能够<a href="https://baike.baidu.com/item/老妪能解" target="_blank" rel="external">老妪能解</a>的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同事发来他写的文章，&lt;a href=&quot;https://mikefighting.github.io/2017/09/05/chat-if-else/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处是链接&lt;/a&gt;。讲的是代码中&lt;code&gt;ifelse&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java读写excel文件</title>
    <link href="http://parallelworld.pw/2017/09/06/Java%E8%AF%BB%E5%86%99excel%E6%96%87%E4%BB%B6/"/>
    <id>http://parallelworld.pw/2017/09/06/Java读写excel文件/</id>
    <published>2017-09-06T05:59:59.000Z</published>
    <updated>2017-09-06T08:42:16.611Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个退款的需求，根据XXX提供的userid，orderid，refundmoney等数据调用相应的接口退款，数据给的形式不是txt，而是excel表格的形式。之前没做过，在此记录下。</p>
<p>选用的库是Apache POI，提供对excel的读写功能的java api。</p>
<ul>
<li>HSSF：excel2003（.xls）</li>
<li>XSSF：excel2007及以后（.xlsx）</li>
</ul>
<p>对应的maven依赖是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.14&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.14&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h3 id="XLSReader"><a href="#XLSReader" class="headerlink" title="XLSReader"></a>XLSReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</div><div class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</div><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XLSReader</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&gt; <span class="title">readExcel</span><span class="params">(String url, <span class="keyword">int</span> sheetIndex)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 从xlsx/xls文件创建输入流</span></div><div class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(url);</div><div class="line">        List list = <span class="keyword">new</span> ArrayList();</div><div class="line"></div><div class="line">        <span class="comment">// 创建工作薄Workbook</span></div><div class="line">        Workbook wb = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (url.toLowerCase().endsWith(<span class="string">"xlsx"</span>)) &#123; <span class="comment">// 读取2007版，以.xlsx结尾</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                wb = <span class="keyword">new</span> XSSFWorkbook(fis);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.toLowerCase().endsWith(<span class="string">"xls"</span>)) &#123; <span class="comment">// 读取2003版，以.xls结尾</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                wb = <span class="keyword">new</span> HSSFWorkbook(fis);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Sheet sheet = wb.getSheetAt(sheetIndex);</div><div class="line">        Row row;</div><div class="line">        String cell;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sheet.getFirstRowNum(); i &lt; sheet.getPhysicalNumberOfRows(); i++) &#123;</div><div class="line">            <span class="comment">// 循环行数</span></div><div class="line">            row = sheet.getRow(i);</div><div class="line">            List cells = <span class="keyword">new</span> ArrayList();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = row.getFirstCellNum(); j &lt; row.getPhysicalNumberOfCells(); j++) &#123;</div><div class="line">                <span class="comment">// 循环列数</span></div><div class="line">                cell = row.getCell(j).toString();</div><div class="line">                cells.add(cell);</div><div class="line">            &#125;</div><div class="line">            list.add(cells);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XLSWriter"><a href="#XLSWriter" class="headerlink" title="XLSWriter"></a>XLSWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XLSWriter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToExcel</span><span class="params">(List&lt;List&gt; list, String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 创建工作薄</span></div><div class="line">        XSSFWorkbook workBook = <span class="keyword">new</span> XSSFWorkbook();</div><div class="line">        <span class="comment">// 在工作薄中创建一工作表</span></div><div class="line">        XSSFSheet sheet = workBook.createSheet();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> rowIndex = <span class="number">0</span>; rowIndex &lt; list.size(); rowIndex++) &#123;</div><div class="line">            <span class="comment">// 在指定的索引处创建一行</span></div><div class="line">            XSSFRow row = sheet.createRow(rowIndex);</div><div class="line">            List cells = list.get(rowIndex);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> cellIndex = <span class="number">0</span>; cellIndex &lt; cells.size(); cellIndex++) &#123;</div><div class="line">                <span class="comment">// 在指定的索引处创建一列（单元格）</span></div><div class="line">                XSSFCell code = row.createCell(cellIndex);</div><div class="line">                <span class="comment">// 定义单元格为字符串类型</span></div><div class="line">                code.setCellType(XSSFCell.CELL_TYPE_STRING);</div><div class="line">                <span class="comment">// 输入cell内容</span></div><div class="line">                code.setCellValue(cells.get(cellIndex).toString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 新建输出流并把相应的excel文件存盘</span></div><div class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(url);</div><div class="line">        workBook.write(fos);</div><div class="line">        fos.flush();</div><div class="line">        <span class="comment">//操作结束，关闭流</span></div><div class="line">        fos.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://zhoushijie5230.iteye.com/blog/2114964" target="_blank" rel="external">http://zhoushijie5230.iteye.com/blog/2114964</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个退款的需求，根据XXX提供的userid，orderid，refundmoney等数据调用相应的接口退款，数据给的形式不是txt，而是excel表格的形式。之前没做过，在此记录下。&lt;/p&gt;
&lt;p&gt;选用的库是Apache POI，提供对excel的读写功能的jav
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何让 Cocoapods 不同版本共存</title>
    <link href="http://parallelworld.pw/2017/01/04/switch-version-of-cocoapods/"/>
    <id>http://parallelworld.pw/2017/01/04/switch-version-of-cocoapods/</id>
    <published>2017-01-04T02:24:15.000Z</published>
    <updated>2017-09-06T08:42:16.611Z</updated>
    
    <content type="html"><![CDATA[<p>公司目前用的 cocoapods 版本是0.35，而平时自己研究别人源码用的都是1.0以上的版本。如果同时安装两个版本，再使用 <code>pod</code> 命令时，总是产生冲突，容易出错。此时两个版本的 cocoapods 会安装在同一个环境下，所以考虑如何让两个版本的 ，甚至多个版本的 cocoapods 安装在不同的环境下，那么版本共存和切换就有了可能性。</p>
<h1 id="渔"><a href="#渔" class="headerlink" title="渔"></a>渔</h1><p>首先我们从 cocoapods 是如何安装的入手分析。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div></pre></td></tr></table></figure>
<p>这段代码是最基本的安装命令，执行后会安装最新的 cocoapods 版本。注意到，用的是 gem 命令，gem 又是个啥呢？</p>
<h2 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h2><p><strong>gem 是封装起来的 Ruby 应用程序或代码库，终端使用的 gem 命令，是指通过 RubyGems 管理 Gem 包。也就是说 cocoapods 是一个 Ruby 代码包，用 gem 来安装。</strong></p>
<p>如果有个管理工具，可以安装和管理多个 Ruby 环境，在每个 Ruby 环境中，用 gem 安装 cocoapods，不就实现了不同版本的 cocoapods 共存了吗？ruby 刚好有个版本管理工具，可以做到这一点。</p>
<h2 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a>RVM</h2><p><strong>RVM 用于帮助你安装 Ruby 环境，帮你管理多个 Ruby 环境，帮你管理你开发的每个 Ruby 应用使用机器上哪个 Ruby 环境。</strong></p>
<p>总结下来就是，使用 RVM 安装不同版本的 Ruby 环境，在每个环境中安装 cocoapods，此时每个 Ruby 环境中的 cocoapods 可以不同。</p>
<p>渔完了，接下来是鱼。</p>
<h1 id="鱼"><a href="#鱼" class="headerlink" title="鱼"></a>鱼</h1><p>需要 cocoapods 版本切换的你，肯定在机子上已经安装好了某个版本的 cocoapods，为了避免引起冲突，先把机器上的 cocoapods 卸载干净。</p>
<h2 id="卸载当前机器上的-cocoapods"><a href="#卸载当前机器上的-cocoapods" class="headerlink" title="卸载当前机器上的 cocoapods"></a>卸载当前机器上的 cocoapods</h2><ol>
<li>终端输入 <code>gem list</code> ，查看当前 gem 下安装的所有包</li>
<li>输入命令 <code>sudo gem uninstall XXX</code> ，XXX 是你要卸载的包名</li>
<li>卸载步骤1中所有 cocoapods 开头的包</li>
<li>反复执行前面几步，直到所有的 cocoapods 开头的包都已经被卸载了</li>
</ol>
<h2 id="安装-rvm-和多个版本的-Ruby"><a href="#安装-rvm-和多个版本的-Ruby" class="headerlink" title="安装 rvm 和多个版本的 Ruby"></a>安装 rvm 和多个版本的 Ruby</h2><ol>
<li>安装 rvm，使用命令 <code>curl -L get.rvm.io | bash -s stable &amp;&amp; source ~/.rvm/scripts/rvm</code></li>
<li>到 <a href="">https://rvm.io/binaries</a> 下载相应版本的ruby包</li>
<li>执行 <code>rvm mount ~/Downloads/ruby-2.2.3.tar.bz2</code> ，其中 ruby-2.2.3.tar.bz2 是你下载好的 ruby 包，按自己的需求可以多安装几个版本</li>
<li>执行 <code>rvm list</code> 可查看当前安装的 ruby 版本列表，执行 <code>rvm use &lt;Version&gt;</code> 可切换到不同版本的 ruby</li>
<li>在某个 ruby 版本下，安装指定版本的 cocoapods，参见下面内容</li>
</ol>
<h2 id="如何正确的安装-cocoapods"><a href="#如何正确的安装-cocoapods" class="headerlink" title="如何正确的安装 cocoapods"></a>如何正确的安装 cocoapods</h2><p>如果你是 mac 的10.11及以上系统，需要使用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods -v &lt;Version&gt; -n /usr/local/bin</div></pre></td></tr></table></figure>
<p>否则的话使用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods -v &lt;Version&gt;</div></pre></td></tr></table></figure>
<h2 id="我安装的版本对应表"><a href="#我安装的版本对应表" class="headerlink" title="我安装的版本对应表"></a>我安装的版本对应表</h2><p>由于 ruby 版本不同，可安装的 cocoapods 版本也就不同，下面是我已经验证可行的版本对应关系。</p>
<table>
<thead>
<tr>
<th style="text-align:center">ruby version</th>
<th style="text-align:center">cocoapods version</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2.1.0</td>
<td style="text-align:center">0.35</td>
</tr>
<tr>
<td style="text-align:center">2.2.0</td>
<td style="text-align:center">0.39</td>
</tr>
<tr>
<td style="text-align:center">2.2.3</td>
<td style="text-align:center">1.0.1</td>
</tr>
</tbody>
</table>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="">https://henter.me/post/ruby-rvm-gem-rake-bundle-rails.html</a></li>
<li><a href="">http://manongs.com/a/GQOrmm</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司目前用的 cocoapods 版本是0.35，而平时自己研究别人源码用的都是1.0以上的版本。如果同时安装两个版本，再使用 &lt;code&gt;pod&lt;/code&gt; 命令时，总是产生冲突，容易出错。此时两个版本的 cocoapods 会安装在同一个环境下，所以考虑如何让两个版本
    
    </summary>
    
      <category term="工具" scheme="http://parallelworld.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建博客（Github+Hexo+文章管理）</title>
    <link href="http://parallelworld.pw/2016/12/30/how-to-build-my-personal-website/"/>
    <id>http://parallelworld.pw/2016/12/30/how-to-build-my-personal-website/</id>
    <published>2016-12-30T11:23:15.000Z</published>
    <updated>2017-09-06T09:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天刚申请了个域名，就迫不及待的建了个人博客。下面是建立过程：</p>
<h1 id="1-新建自己的-Github-Page"><a href="#1-新建自己的-Github-Page" class="headerlink" title="1. 新建自己的 Github Page"></a>1. 新建自己的 Github Page</h1><p>在自己的 Github 上新建一个 repository，取名<code>yourusername.github.io</code>。<code>README</code>和<code>gitignore</code>文件不用添加，所有选择默认即可。建好之后，是一个空的仓库，后面会用来保存生成的博客网页。</p>
<h1 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h1><p>由于 Hexo 这个博客框架更新很快，网上的很多相关博客其实都已经过时，所以还是参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="external"> Hexo 官网</a>的教程为准。</p>
<p>主要命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>除此之外，还需要修改<code>blog</code>文件夹下的<code>_config.yml</code>配置文件，关联之前创建的仓库。命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 修改前</div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div><div class="line"></div><div class="line">// 修改后</div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/yourusername/yourusername.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p><code>type</code>、<code>repo</code>和<code>branch</code>之前一定要有两个空格，否则会报错。</p>
<p>为了能够识别<code>git</code>，还需要安装<code>hexo-deployer-git</code>包，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>到此就可以本地写博客，并且可以发布到<code>https://github.com/yourusername/yourusername.github.io</code>网页上了。</p>
<h1 id="3-博客文章管理"><a href="#3-博客文章管理" class="headerlink" title="3. 博客文章管理"></a>3. 博客文章管理</h1><p>除了上班的闲暇时间写写东西外，回家的时候可能也会写点，这时候就遇到了文章的同步问题。既然 Hexo 生成的博客网页可以存放在 github 上，那博客的文章为什么不能呢？所以新建一个仓库，取名<code>blog</code>，专门用来存放博客的源文件。</p>
<p>但是有个问题，就是有些文件是我们在生成博客网页的时候自动生成的。这些其实没有必要同步，而且每次都会重新生成，容易引起冲突。所以我们需要添加一个<code>.gitignore</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure>
<p>当在新机器上写博客时，只需要把源文件 clone 下来，输入命令<code>npm install</code>即可。</p>
<h1 id="4-安装maupassant主题"><a href="#4-安装maupassant主题" class="headerlink" title="4. 安装maupassant主题"></a>4. 安装maupassant主题</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">npm install hexo-renderer-jade --save</div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org  # 使用taobao源的cnpm代替官方的npm</div><div class="line">cnpm install hexo-renderer-sass --save   # 安装hexo-renderer-sass插件</div><div class="line"><span class="meta">#</span> 修改blog目录下，而不是主题目录下的_config.yml</div><div class="line">theme: landscape-&gt;theme: maupassant</div><div class="line"></div><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="external">http://www.jianshu.com/p/834d7cc0668d</a></li>
<li><a href="https://hexo.io/zh-cn" target="_blank" rel="external">https://hexo.io/zh-cn</a></li>
<li><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天刚申请了个域名，就迫不及待的建了个人博客。下面是建立过程：&lt;/p&gt;
&lt;h1 id=&quot;1-新建自己的-Github-Page&quot;&gt;&lt;a href=&quot;#1-新建自己的-Github-Page&quot; class=&quot;headerlink&quot; title=&quot;1. 新建自己的 Github
    
    </summary>
    
      <category term="工具" scheme="http://parallelworld.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="blog" scheme="http://parallelworld.pw/tags/blog/"/>
    
  </entry>
  
</feed>
